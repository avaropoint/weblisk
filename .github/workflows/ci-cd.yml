# GitHub Actions CI Pipeline for Weblisk Framework
name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.4.5

      - name: Cache dependencies
        run: deno cache mod.ts src/**/*.ts tests/*.ts

      - name: Run type checking
        run: deno check mod.ts src/**/*.ts tests/*.ts

      - name: Run linting
        run: deno lint

      - name: Run formatting check
        run: deno fmt --check

      - name: Run tests
        run: deno test --allow-net --allow-read --allow-env tests/

      - name: Validate library exports
        run: |
          echo "=== Validating Library Exports ==="
          # Check that mod.ts exports are valid
          deno eval "import * as weblisk from './mod.ts'; console.log('✅ Library exports are valid');"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.4.5

      - name: Run security audit
        run: |
          # Check for known vulnerabilities in dependencies
          echo "=== Dependency Security Audit ==="
          deno info --json src/weblisk.ts | grep -o '"specifier":[^,]*' | grep -o 'https://[^"]*' | sort -u > deps.txt
          echo "External dependencies found:"
          cat deps.txt

          # Enhanced security checks with reduced false positives
          echo "=== Enhanced Security Checks ==="
          echo "Checking for potential security issues..."

          # Check for hardcoded secrets (more specific patterns)
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}"
            "secret\s*=\s*['\"][^'\"]{8,}"
            "token\s*=\s*['\"][^'\"]{16,}"
            "api_key\s*=\s*['\"][^'\"]{16,}"
            "private_key\s*=\s*['\"][^'\"]{20,}"
            "access_key\s*=\s*['\"][^'\"]{16,}"
          )

          SECRETS_FOUND=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" src/ --include="*.ts" --exclude-dir=node_modules; then
              SECRETS_FOUND=true
              echo "⚠️  Potential hardcoded secret found: $pattern"
            fi
          done

          if [ "$SECRETS_FOUND" = false ]; then
            echo "✅ No hardcoded secrets found"
          fi

          # Check for eval usage (blocking)
          if grep -r "eval(" src/ --include="*.ts"; then
            echo "⚠️  eval() usage found - potential security risk"
            exit 1
          else
            echo "✅ No eval() usage found"
          fi

          # Check for potential XSS vulnerabilities (warning only)
          if grep -r "innerHTML\s*=" src/ --include="*.ts"; then
            echo "⚠️  innerHTML usage found - potential XSS risk if data is not sanitized"
            echo "   Consider using textContent or proper escaping for user data"
          else
            echo "✅ No innerHTML usage found"
          fi

          # Check for unsafe HTTP requests in production code
          if grep -r "http://" src/ --include="*.ts" | grep -v "localhost" | grep -v "127.0.0.1"; then
            echo "⚠️  Unsafe HTTP URLs found in production code"
          else
            echo "✅ No unsafe HTTP URLs found"
          fi

          echo "=== Security Scan Complete ==="

  publish:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.4.5

      - name: Publish to JSR
        run: |
          echo "=== Publishing to JSR ==="
          # JSR publishing would go here when ready
          echo "Library is ready for JSR publishing"
          # deno publish --allow-dirty
